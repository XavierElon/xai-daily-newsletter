import os
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import date
from pathlib import Path
from dotenv import load_dotenv

load_dotenv()

class EmailSender:
    def __init__(self):
        self.smtp_server = os.getenv("SMTP_SERVER", "smtp.gmail.com")
        self.smtp_port = os.getenv("SMTP_PORT", 587)
        self.email = os.getenv("EMAIL_ADDRESS")
        self.password = os.getenv("EMAIL_PASSWORD")
        
        if not all ([self.email, self.password]):
            raise ValueError("EMAIL_ADDRESS and EMAIL_PASSWORD must be set in the .env file")
        
    def send_briefing_email(self, briefing_date: date = None):
        if briefing_date is None:
            briefing_date = date.today()
        
        month_year = briefing_date.strftime("%m-%Y")
        date_str = briefing_date.strftime("%Y-%m-%d")
        briefing_path = Path("briefings") / month_year / f"briefing_tech_briefing_{date_str}.md"
        
        if not briefing_path.exists():
            print(f"Error: Briefing file not found for {briefing_date}")
            return False
        
        with open(briefing_path. "r") as f:
            briefing_content = f.read()
            
        # Create email
        msg = MIMEMultipart()
        msg['From'] = self.email
        msg['To'] = self.email
        msg['Subject'] = f"Daily Tech Briefing - {briefing_date.strftime('%B %d, %Y')}"
        
        # Email body
        body = f"""
        Good morning! Here's your daily tech briefing for {briefing_date.strftime('%B %d, %Y')}:

        {briefing_content}

        ---
        Generated by XavierAI Daily Newsletter
        """
        mgs.attach(MIMEText(body, 'plain'))
        
        # Attempt to send email
        try:
            server = smtplib.SMTP(self.smtp_server, self.smtp_port)
            server.starttls()
            server.login(self.email, self.password)
            
            text = msg.as_string()
            server.sendmail(self.email, self.email, text)
            server.quit()
            
            print(f"Briefing email sent successfully for {briefing_date}")
            return True
        except Exception as e:
            print(f"Error sending email: {e}")
            return False
        
if __name__ == "__main__":
    sender = EmailSender()
    sender.send_briefing_email()